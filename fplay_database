#!/usr/bin/env bash

# set -x

print_usage() {
    printf '\nUsage:\n\n\t%s\n' "$(basename "${0}") (update|recreate|get_files)"
}

if [[ ! ${#} -eq 1  ]]
then
    print_usage >&2
    exit 1
fi

fplay_database=~/.cache/fplay_database.db

inode=""
get_inode(){
    if [[ -z "${inode}" ]]
    then
        inode=$(find . -mindepth 0 -maxdepth 0 -type d -printf '%i')
    fi
    echo ${inode}
}

purge_database(){
    if [[ -f "${fplay_database}" ]]
    then
        rm "${fplay_database}"
    fi
}

import_folder_metadata(){
    folder_metadata="$(mktemp)"
    find . -mindepth 0 -maxdepth 0 -type d -printf '%i\t%T@' \
        > "${folder_metadata}"
    sqlite3 -batch "${fplay_database}" <<EOF
CREATE TEMPORARY TABLE folder_metadata_temp(
    inode INTEGER,
    timestamp DOUBLE PRECISION
);
.separator "\t"
.import "${folder_metadata}" folder_metadata_temp
SELECT m.inode
from folder_metadata_temp t
left join folder_metadata m
    on m.inode = t.inode
where m.timestamp is NULL
or t.timestamp > m.timestamp;
insert or replace into folder_metadata
SELECT * from folder_metadata_temp;
EOF
    rm "${folder_metadata}"
}

import_last_acess(){
    inode=`get_inode`
    last_access="$(mktemp)"
    find . -mindepth 1 -maxdepth 1 ! -path \*/.\* -type f -printf '%T@\t%p\n' \
        > "${last_access}"
    sqlite3 -batch "${fplay_database}" <<EOF
CREATE TEMPORARY TABLE media_last_access_temp(
    timestamp DOUBLE PRECISION,
    name TEXT
);
.separator "\t"
.import "${last_access}" media_last_access_temp
delete from media_last_access
where parent_inode = ${inode};
insert or ignore into media_last_access
SELECT ${inode}, t.* from media_last_access_temp t;
EOF
    rm "${last_access}"
}

import_mime_type(){
    inode=`get_inode`
    mime_type="$(mktemp)"
    find . -mindepth 1 -maxdepth 1 ! -path \*/.\* -type f -exec file -i -F '	' "{}" \+ \
        > "${mime_type}"
    sqlite3 -batch "${fplay_database}" <<EOF
CREATE TEMPORARY TABLE media_mime_type_temp(
name TEXT,
mime_type TEXT
);
.separator "\t"
.import "${mime_type}" media_mime_type_temp
delete from media_mime_type
where parent_inode = ${inode};
insert or ignore into media_mime_type
SELECT ${inode}, t.* from media_mime_type_temp t;
EOF
    rm "${mime_type}"
}

create_database(){
    if [[ ! -d ~/.cache ]]
    then
        mkdir ~/.cache
    fi
    if [[ ! -f "${fplay_database}" ]]
    then
        sqlite3 -batch "${fplay_database}" <<EOF
CREATE TABLE folder_metadata(
    inode INTEGER PRIMARY KEY,
    timestamp DOUBLE PRECISION
);
CREATE TABLE media_last_access(
    parent_inode INTEGER,
    timestamp DOUBLE PRECISION,
    name TEXT,
    PRIMARY KEY (parent_inode,name),
    CONSTRAINT fk_last_access_metadata
    FOREIGN KEY (parent_inode)
    REFERENCES folder_metadata(inode)
);
CREATE TABLE media_mime_type(
    parent_inode INTEGER,
    name TEXT,
    mime_type TEXT,
    PRIMARY KEY (parent_inode,name),
    CONSTRAINT fk_mime_type_metadata
    FOREIGN KEY (parent_inode)
    REFERENCES folder_metadata(inode)
);
CREATE INDEX ix_last_access_timestamp ON media_last_access(parent_inode,timestamp);
CREATE INDEX ix_last_access_name ON media_last_access(parent_inode,name);
CREATE INDEX ix_mime_type_name ON media_mime_type(parent_inode,name);
EOF
    else
        return 1
    fi
}

folder_modified(){
    if create_database
    then
        return 0
    fi
    rows="`import_folder_metadata`"
    if [[ -z "${rows}" ]]
    then
        return 1
    fi
}

import_data(){
    import_last_acess
    import_mime_type
}

update(){
    if folder_modified
    then
        import_data
    fi
}

recreate(){
    purge_database
    update
}

get_files(){
    inode=`get_inode`
    update
    sqlite3 "${fplay_database}" \
        "SELECT t.name \
        from media_mime_type t \
        join media_last_access l \
            on l.parent_inode = t.parent_inode \
            and l.name = t.name \
            and l.parent_inode = ${inode}
        where mime_type like '%video%' \
        or mime_type like '%audio%' \
        order by timestamp desc;"
}

cmd="${1}"

case ${cmd} in
    update)
        update
        ;;
    get_files)
        get_files
        ;;
    recreate)
        recreate
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2 
        exit 1
        ;;
esac
