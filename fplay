#!/usr/bin/env bash

# set -x

print_usage() {
	printf '\nUsage:\n\n\t%s\n' "$(basename "${0}")"
}

if [[ -z "${FPLAY_PLAYER}" ]]
then
    printf 'FPLAY_PLAYER not set.\n' 1>&2
    exit 1
fi

choice=""
while getopts ":lrh" opt
do
    case ${opt} in
        l)
            choice="last"
            ;;
        r)
            choice="recent"
            ;;
        h)
            print_usage
            exit 0
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2 
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

if [[ ! ${#} -eq 0  ]]
then
    print_usage >&2
    exit 1
fi

history_file=~/.cache/fplay_fzf_history
recent_files=~/.cache/fplay_recent_files

generate_header(){
    fplay_database get_files | head
}

selectfile(){

    if [[ ! -f "${history_file}" ]]
    then
        touch "${history_file}"
    fi

    fzf --header="`generate_header`" \
        --history "${history_file}" < <( fplay_database get_files )
}

selectlast(){
    if [[ ! -f "${recent_files}" ]]
    then
        return 1
    fi

    tail -n1 "${recent_files}"
}

selectrecent(){
    if [[ ! -f "${recent_files}" ]]
    then
        return 3
    fi

    sort -u "${recent_files}" \
        | fzf --header="`generate_header`" --history "${history_file}"
}

cachefile(){
    recent_file="${1}"

    if [[ -z "${recent_file}" ]]
    then
        return 1
    fi

    if [[ ! -f "${recent_files}" ]]
    then
        touch "${recent_files}"
    else
        temp_file=$(mktemp)
        cp "${recent_files}" "${temp_file}"
        tail -n -9 "${temp_file}" | uniq -u > "${recent_files}"
        rm "${temp_file}"
    fi

    printf '%s\n' "${recent_file}" >> "${recent_files}"
}

case ${choice} in
    last)
        file="`selectlast`"
        ;;
    recent)
        file="`selectrecent`"
        ;;
    *)
        file="`selectfile`"
        ;;
esac

err=${?}

if [[ ! ${err} -eq 0 ]]
then
    case ${choice} in
        last)
            printf 'No recent files.\n' 1>&2
            exit 1
            ;;
        recent)
            if [[ ${err} -eq 3 ]]
            then
                printf 'No recent files.\n' 1>&2
                exit 1
            fi
            ;;
    esac
    printf 'Aborted.\n' 1>&2
    exit 1
fi

cachefile "${file}"

if [[ ! ${?} -eq 0 ]]
then
    printf 'Could not cache file.\n' 1>&2
    exit 1
fi

if [[ ! -f "${file}" ]]
then
    printf 'No such file: %s.\n' "${file}" 1>&2
    exit 1
fi

${FPLAY_PLAYER} "${file}"
